

Count good numbers:


Pseudo code:
       1.count add and even number.in N
       2.power mode N number even->N+1/2 , odd->n/2.
       3.even indices->5,odd indices->4.
       4.powmod count even and even indices.
       5.return powmod number.
     

    #  my reff:

    #         0,1,2,3,4,5,6,7,8,9

    #         even indices:5
    #         odd indices:4

    #  0,1,2,3,4     => n+1/2 =>odd     ,  n/2=>even

    #  pow(5,even)
    #  pow(4,odd)       


Code:
     
     const ll = BigInt;
     const int = parseInt;
     const mod = ll(1e9 + 7);
     const powm-od = (a, b, mod) => 
{
     let r = 1n; while (b > 0n)
      {
           if (b % 2n == 1) r = r * a % mod; 
           b >>= 1n; a = a * a % mod;
            }
             return r; 
             };

   const countGoodNumbers = (n) =>
 {
    let countEven = countOdd = int(n / 2);
    //odd => n+1/2   --->   even=>n/2
    if (n % 2 == 1) countEven++;
    let res = powmod(5n, ll(countEven), mod) * powmod(4n, ll(countOdd), mod);
    return Number(res % mod);
};
    